name: Cross-platform O0/O3 builds

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build_and_run:
    name: Linux and macOS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install tools
      run: |
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          sudo apt-get update && sudo apt-get install -y build-essential binutils cmake make
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          brew install binutils cmake
          echo 'export PATH="/opt/homebrew/opt/binutils/bin:$PATH"' >> ~/.bash_profile
          source ~/.bash_profile
        fi

    - name: Build -O0
      run: |
        cmake -S . -B build_O0 -DCMAKE_CXX_FLAGS_INIT="-O0 -g" -DCMAKE_BUILD_TYPE=Release
        cmake --build build_O0

    - name: Run -O0
      run: |
        executable="./build_O0/main"
        size $executable
        objdump -t $executable
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          readelf -S $executable
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          otool -hvl $executable
        fi

    - name: Build -O3
      run: |
        cmake -S . -B build_O3 -DCMAKE_CXX_FLAGS_INIT="-O3 -g" -DCMAKE_BUILD_TYPE=Release
        cmake --build build_O3

    - name: Run -O3
      run: |
        executable="./build_O3/main"
        size $executable || echo "size not available"
        objdump -t $executable
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          readelf -S $executable
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          otool -hvl $executable
        fi

  windows:
    name: Windows Build and Run
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4

    - name: Install MSYS2
      run: choco install msys2 -y

    - name: Install MSYS2 packages
      run: |
        C:/tools/msys64/usr/bin/bash.exe -lc "
          pacman -Sy --noconfirm \
            mingw-w64-x86_64-toolchain \
            make \
            cmake \
            binutils
        "

    - name: Build -O0
      run: |
        C:/tools/msys64/usr/bin/bash.exe -lc "
          cd \$(cygpath -u '${GITHUB_WORKSPACE}')
          mkdir -p build_O0 && cd build_O0
          cmake -G 'Unix Makefiles' -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS='-O0 -g' .. 
          make
        "

    - name: Run -O0
      run: |
        C:/tools/msys64/usr/bin/bash.exe -lc "
          cd \$(cygpath -u '${GITHUB_WORKSPACE}/build_O0')
          ./main.exe
          size ./main.exe
          objdump -t ./main.exe
          objdump -x ./main.exe
        "

    - name: Build -O3
      run: |
        C:/tools/msys64/usr/bin/bash.exe -lc "
          cd \$(cygpath -u '${GITHUB_WORKSPACE}')
          mkdir -p build_O3 && cd build_O3
          cmake -G 'Unix Makefiles' -DCMAKE_CXX_COMPILER=g++ -DCMAKE_CXX_FLAGS='-O3 -g' .. 
          make
        "

    - name: Run -O3
      run: |
        C:/tools/msys64/usr/bin/bash.exe -lc "
          cd \$(cygpath -u '${GITHUB_WORKSPACE}/build_O3')
          ./main.exe
          size ./main.exe
          objdump -t ./main.exe
          objdump -x ./main.exe
        "